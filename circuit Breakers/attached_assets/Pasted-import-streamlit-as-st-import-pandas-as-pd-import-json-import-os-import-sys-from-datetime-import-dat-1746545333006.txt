import streamlit as st
import pandas as pd
import json
import os
import sys
from datetime import datetime
import hashlib

# Add the parent directory to the path to import from the app root
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from util import load_team_members, check_role_access, generate_id
# Import database functionality
from database import SessionLocal, User
# Import auth functions
import auth

# Page configuration
st.set_page_config(
    page_title="Team Profiles - Circuit Breakers",
    page_icon="ðŸ‘¥",
    layout="wide"
)

# Check if user is authenticated
if 'authenticated' not in st.session_state or not st.session_state.authenticated:
    st.warning("Please login to access this page.")
    st.stop()

# Page title
st.title("Team Profiles")
st.write("Team member information, roles, and contact details")

# Define roles and departments
TEAM_ROLES = ["member", "lead", "admin"]
TEAM_DEPARTMENTS = ["Engineering", "Design", "Electrical", "Software", "Outreach", "Media", "Safety", "Management"]

# Initialize session state for member form
if 'show_member_form' not in st.session_state:
    st.session_state.show_member_form = False
if 'editing_member' not in st.session_state:
    st.session_state.editing_member = None
if 'member_search' not in st.session_state:
    st.session_state.member_search = ""
if 'view_mode' not in st.session_state:
    st.session_state.view_mode = "cards"  # or "table"

# Load team members
def get_user_data_file():
    return "data/users.json"

def load_users():
    # First try to load from database
    db = SessionLocal()
    try:
        # Load users from database
        db_users = db.query(User).all()
        
        # Create dictionary structure
        users_dict = {}
        for db_user in db_users:
            users_dict[db_user.username] = {
                'name': db_user.name,
                'email': db_user.email,
                'role': db_user.role,
                'password': db_user.password,
                'department': db_user.department,
                'created_at': db_user.created_at.isoformat() if db_user.created_at else datetime.now().isoformat()
            }
        
        # If database has users, return them
        if users_dict:
            return users_dict
    except Exception as e:
        st.warning(f"Error loading users from database: {str(e)}. Falling back to JSON file.")
    finally:
        db.close()
    
    # As fallback, load from JSON file
    user_data_file = get_user_data_file()
    if not os.path.exists(user_data_file):
        return {}
    
    with open(user_data_file, 'r') as f:
        return json.load(f)

def save_users(users):
    # Save to JSON file (for backward compatibility)
    user_data_file = get_user_data_file()
    with open(user_data_file, 'w') as f:
        json.dump(users, f, indent=4)
        
    # Also save to database
    db = SessionLocal()
    try:
        for username, user_data in users.items():
            # Check if user exists in database
            db_user = db.query(User).filter(User.username == username).first()
            
            if db_user:
                # Update existing user
                db_user.name = user_data.get('name', '')
                db_user.email = user_data.get('email', '')
                db_user.role = user_data.get('role', 'member')
                db_user.department = user_data.get('department', None)
                # Only update password if it's changed
                if 'password' in user_data:
                    db_user.password = user_data['password']
            else:
                # Create new user
                new_user = User(
                    username=username,
                    password=user_data.get('password', ''),
                    name=user_data.get('name', ''),
                    email=user_data.get('email', ''),
                    role=user_data.get('role', 'member'),
                    department=user_data.get('department', None),
                    created_at=datetime.fromisoformat(user_data.get('created_at', datetime.now().isoformat()))
                )
                db.add(new_user)
        
        db.commit()
    except Exception as e:
        db.rollback()
        st.error(f"Error saving to database: {str(e)}")
    finally:
        db.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

users = load_users()

# Function to toggle member form visibility
def toggle_member_form():
    st.session_state.show_member_form = not st.session_state.show_member_form
    st.session_state.editing_member = None

# Function to edit an existing member
def edit_member(username):
    st.session_state.editing_member = username
    st.session_state.show_member_form = True

# Function to delete a member
def delete_member(username):
    if not check_role_access(['admin']):
        st.error("You don't have permission to delete team members.")
        return
    
    global users
    if username in users:
        # Don't allow deleting the last admin
        admin_count = sum(1 for user in users.values() if user.get('role') == 'admin')
        if users[username].get('role') == 'admin' and admin_count <= 1:
            st.error("Cannot delete the last admin user.")
            return
        
        # Delete from JSON user object
        users.pop(username)
        
        # Delete from database
        db = SessionLocal()
        try:
            # Find user in database
            db_user = db.query(User).filter(User.username == username).first()
            if db_user:
                db.delete(db_user)
                db.commit()
        except Exception as e:
            db.rollback()
            st.error(f"Error deleting user from database: {str(e)}")
        finally:
            db.close()
        
        # Save updated JSON
        save_users(users)
        st.success(f"User {username} deleted successfully!")
        st.rerun()
    else:
        st.error(f"User {username} not found.")

# Create top action buttons
col1, col2, col3 = st.columns([1, 1, 2])

with col1:
    # Only admin can add team members
    if check_role_access(['admin']):
        if st.button("Add New Team Member ðŸ‘¤"):
            toggle_member_form()

with col2:
    # Toggle view mode
    view_options = ["Card View", "Table View"]
    selected_view = st.radio("View Mode", view_options, horizontal=True, 
                             index=0 if st.session_state.view_mode == "cards" else 1)
    
    if selected_view == "Card View":
        st.session_state.view_mode = "cards"
    else:
        st.session_state.view_mode = "table"

with col3:
    st.session_state.member_search = st.text_input("Search team members...", value=st.session_state.member_search)

# Create tabs
tab1, tab2 = st.tabs(["All Team Members", "Team Structure"])

with tab1:
    # Filter members based on search term
    filtered_members = []
    
    for username, user_data in users.items():
        if st.session_state.member_search.lower() in username.lower() or \
           st.session_state.member_search.lower() in user_data.get('name', '').lower() or \
           st.session_state.member_search.lower() in user_data.get('role', '').lower() or \
           st.session_state.member_search.lower() in user_data.get('email', '').lower() or \
           st.session_state.member_search.lower() in user_data.get('department', '').lower():
           
            # Add username to user_data for convenience
            member_info = user_data.copy()
            member_info['username'] = username
            filtered_members.append(member_info)
    
    # Filter options
    filter_col1, filter_col2, filter_col3 = st.columns(3)
    
    with filter_col1:
        filter_role = st.multiselect("Filter by Role", ["All"] + TEAM_ROLES, default=["All"])
    
    with filter_col2:
        # Get unique departments from users
        all_departments = set()
        for user_data in users.values():
            if 'department' in user_data:
                all_departments.add(user_data['department'])
        
        filter_department = st.multiselect("Filter by Department", ["All"] + list(all_departments), default=["All"])
    
    with filter_col3:
        sort_options = ["Name (A-Z)", "Role", "Department", "Join Date"]
        sort_by = st.selectbox("Sort by", sort_options)
    
    # Apply filters
    # Role filter
    if not ("All" in filter_role or len(filter_role) == 0):
        filtered_members = [member for member in filtered_members if member.get('role', '') in filter_role]
    
    # Department filter
    if not ("All" in filter_department or len(filter_department) == 0):
        filtered_members = [member for member in filtered_members if member.get('department', '') in filter_department]
    
    # Apply sorting
    if sort_by == "Name (A-Z)":
        filtered_members.sort(key=lambda x: x.get('name', '').lower())
    elif sort_by == "Role":
        # Define role order for sorting
        role_order = {"admin": 0, "lead": 1, "member": 2}
        filtered_members.sort(key=lambda x: role_order.get(x.get('role', ''), 999))
    elif sort_by == "Department":
        filtered_members.sort(key=lambda x: x.get('department', '').lower())
    elif sort_by == "Join Date":
        filtered_members.sort(key=lambda x: x.get('created_at', ''), reverse=True)
    
    # Display members based on view mode
    if st.session_state.view_mode == "cards":
        if filtered_members:
            # Display in a grid of cards
            num_cols = 3
            for i in range(0, len(filtered_members), num_cols):
                cols = st.columns(num_cols)
                for j in range(num_cols):
                    idx = i + j
                    if idx < len(filtered_members):
                        member = filtered_members[idx]
                        with cols[j]:
                            # Get role color
                            role_colors = {
                                "admin": "#dc3545",  # red
                                "lead": "#fd7e14",   # orange
                                "member": "#28a745"  # green
                            }
                            role_color = role_colors.get(member.get('role', 'member'), "#6c757d")
                            
                            # Create card
                            with st.container():
                                st.markdown(
                                    f"""
                                    <div style="border: 1px solid #ddd; border-radius: 5px; padding: 15px; margin-bottom: 15px;">
                                        <h3 style="margin-top: 0;">
                                            {member.get('name', 'Unknown')}
                                            <span style="background-color: {role_color}; padding: 2px 8px; border-radius: 10px; color: white; font-size: 0.7em; vertical-align: middle; margin-left: 5px;">
                                                {member.get('role', 'member').upper()}
                                            </span>
                                        </h3>
                                        <p><strong>Username:</strong> {member.get('username')}</p>
                                        <p><strong>Email:</strong> {member.get('email', 'No email provided')}</p>
                                        <p><strong>Department:</strong> {member.get('department', 'Unassigned')}</p>
                                    """,
                                    unsafe_allow_html=True
                                )
                                
                                # Show skills if available
                                if 'skills' in member and member['skills']:
                                    skills_list = ', '.join(member['skills'])
                                    st.markdown(f"**Skills:** {skills_list}")
                                
                                # Show join date if available
                                if 'created_at' in member:
                                    created_at = datetime.fromisoformat(member['created_at'])
                                    st.markdown(f"**Joined:** {created_at.strftime('%B %d, %Y')}")
                                
                                # Add action buttons if admin
                                if check_role_access(['admin']):
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        if st.button("Edit", key=f"edit_{member['username']}"):
                                            edit_member(member['username'])
                                    with col2:
                                        if st.button("Delete", key=f"delete_{member['username']}"):
                                            delete_member(member['username'])
                                
                                st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.info("No team members found matching your filters.")
    else:  # Table view
        if filtered_members:
            # Create DataFrame for table view
            member_data = []
            for member in filtered_members:
                if 'created_at' in member:
                    created_at = datetime.fromisoformat(member['created_at'])
                    join_date = created_at.strftime('%m/%d/%Y')
                else:
                    join_date = "Unknown"
                
                member_data.append({
                    "Name": member.get('name', 'Unknown'),
                    "Username": member.get('username', ''),
                    "Role": member.get('role', 'member').capitalize(),
                    "Department": member.get('department', 'Unassigned'),
                    "Email": member.get('email', 'No email'),
                    "Joined": join_date
                })
            
            member_df = pd.DataFrame(member_data)
            
            # Display table
            st.dataframe(member_df, use_container_width=True)
            
            # Add action buttons below table
            if check_role_access(['admin']):
                st.subheader("Member Actions")
                
                selected_username = st.selectbox(
                    "Select a team member",
                    [member['username'] for member in filtered_members],
                    format_func=lambda x: next((m['name'] for m in filtered_members if m['username'] == x), x)
                )
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Edit Selected Member"):
                        edit_member(selected_username)
                with col2:
                    if st.button("Delete Selected Member"):
                        delete_member(selected_username)
        else:
            st.info("No team members found matching your filters.")

with tab2:
    st.subheader("Team Structure")
    
    # Create a hierarchical view of the team
    if users:
        # Count members by department
        departments = {}
        for user_data in users.values():
            dept = user_data.get('department', 'Unassigned')
            if dept not in departments:
                departments[dept] = []
            
            departments[dept].append({
                'name': user_data.get('name', 'Unknown'),
                'role': user_data.get('role', 'member')
            })
        
        # Display department sections
        for dept, members in departments.items():
            with st.expander(f"{dept} Department ({len(members)} members)"):
                # Sort members by role (admin > lead > member)
                def role_sort_key(member):
                    role_order = {"admin": 0, "lead": 1, "member": 2}
                    return role_order.get(member['role'], 999)
                
                members.sort(key=role_sort_key)
                
                # Display members in this department
                for member in members:
                    role_labels = {
                        "admin": "Administrator",
                        "lead": "Team Lead",
                        "member": "Team Member"
                    }
                    role_label = role_labels.get(member['role'], "Team Member")
                    
                    role_colors = {
                        "admin": "#dc3545",  # red
                        "lead": "#fd7e14",   # orange
                        "member": "#28a745"  # green
                    }
                    role_color = role_colors.get(member['role'], "#6c757d")
                    
                    st.markdown(
                        f"""
                        <div style="margin-bottom: 10px;">
                            <span style="font-size: 1.1em; font-weight: bold;">{member['name']}</span>
                            <span style="background-color: {role_color}; padding: 2px 8px; border-radius: 10px; color: white; font-size: 0.8em; margin-left: 10px;">
                                {role_label}
                            </span>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
        
        # Display a team composition chart
        st.subheader("Team Composition")
        
        # Create data for pie chart: role distribution
        role_counts = {"admin": 0, "lead": 0, "member": 0}
        for user_data in users.values():
            role = user_data.get('role', 'member')
            if role in role_counts:
                role_counts[role] += 1
            else:
                role_counts['member'] += 1
        
        role_data = pd.DataFrame({
            "Role": [role.capitalize() for role in role_counts.keys()],
            "Count": list(role_counts.values())
        })
        
        # Create data for bar chart: department distribution
        dept_counts = {}
        for user_data in users.values():
            dept = user_data.get('department', 'Unassigned')
            if dept in dept_counts:
                dept_counts[dept] += 1
            else:
                dept_counts[dept] = 1
        
        dept_data = pd.DataFrame({
            "Department": list(dept_counts.keys()),
            "Members": list(dept_counts.values())
        })
        
        # Sort by count
        dept_data = dept_data.sort_values("Members", ascending=False)
        
        # Display charts side by side
        col1, col2 = st.columns(2)
        
        with col1:
            # Use Streamlit's native charting
            st.subheader("Role Distribution")
            st.bar_chart(role_data.set_index("Role"))
        
        with col2:
            st.subheader("Department Distribution")
            st.bar_chart(dept_data.set_index("Department"))
    else:
        st.info("No team members available to display team structure.")

# Member form (add/edit)
if st.session_state.show_member_form:
    st.markdown("---")
    
    # Determine if we're editing or creating a new member
    editing = st.session_state.editing_member is not None
    
    if editing:
        username_to_edit = st.session_state.editing_member
        user_to_edit = users.get(username_to_edit, {})
        st.subheader(f"Edit Team Member: {user_to_edit.get('name', username_to_edit)}")
    else:
        st.subheader("Add New Team Member")
    
    # Create form
    with st.form("member_form"):
        # Pre-fill values if editing
        if editing:
            name_value = user_to_edit.get('name', '')
            email_value = user_to_edit.get('email', '')
            role_index = TEAM_ROLES.index(user_to_edit.get('role', 'member')) if user_to_edit.get('role') in TEAM_ROLES else 2  # Default to member
            username_value = username_to_edit
            # Don't show password field for editing (or set to empty)
            department_value = user_to_edit.get('department', '')
            bio_value = user_to_edit.get('bio', '')
            skills_value = ', '.join(user_to_edit.get('skills', []))
        else:
            name_value = ""
            email_value = ""
            role_index = 2  # Default to member
            username_value = ""
            department_value = ""
            bio_value = ""
            skills_value = ""
        
        # Form fields
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Full Name*", value=name_value)
            email = st.text_input("Email*", value=email_value)
            role = st.selectbox("Role*", TEAM_ROLES, index=role_index, format_func=lambda x: x.capitalize())
        
        with col2:
            username = st.text_input("Username*", value=username_value, disabled=editing)
            department = st.selectbox("Department", [""] + TEAM_DEPARTMENTS, 
                                     index=TEAM_DEPARTMENTS.index(department_value)+1 if department_value in TEAM_DEPARTMENTS else 0)
            
            # Only show password field for new users
            if not editing:
                password = st.text_input("Password*", type="password")
                confirm_password = st.text_input("Confirm Password*", type="password")
        
        # Additional fields
        bio = st.text_area("Bio/About", value=bio_value, help="A brief description of the team member")
        skills = st.text_input("Skills (comma separated)", value=skills_value, help="Example: CAD, Programming, Electrical")
        
        # Submit buttons
        col1, col2 = st.columns(2)
        
        with col1:
            submit_button = st.form_submit_button("Save Team Member")
        
        with col2:
            cancel_button = st.form_submit_button("Cancel")
        
        if cancel_button:
            st.session_state.show_member_form = False
            st.session_state.editing_member = None
            st.rerun()
        
        if submit_button:
            # Validate required fields
            if not name or not email or not username:
                st.error("Name, email, and username are required!")
            elif not editing and not password:
                st.error("Password is required for new team members!")
            elif not editing and password != confirm_password:
                st.error("Passwords do not match!")
            elif not editing and username in users:
                st.error(f"Username '{username}' already exists!")
            else:
                # Process skills
                skills_list = [skill.strip() for skill in skills.split(",") if skill.strip()]
                
                if editing:
                    # Update existing user
                    users[username]['name'] = name
                    users[username]['email'] = email
                    users[username]['role'] = role
                    users[username]['department'] = department
                    users[username]['bio'] = bio
                    users[username]['skills'] = skills_list
                    # Note: We don't update the password here
                    
                    # Save users to file and database
                    save_users(users)
                    success_message = "Team member updated successfully!"
                else:
                    # Create new user through auth module for consistency
                    success, message = auth.create_user(
                        username=username,
                        password=password,
                        name=name,
                        email=email,
                        role=role,
                        department=department
                    )
                    
                    if success:
                        # After successful creation, add any additional fields not in auth.create_user
                        # Reload users to get the fresh data
                        def my_func():
                            global users
                            users.append("new user")


                        # Add the additional fields that aren't in the auth module
                        if username in users:
                            users[username]['bio'] = bio
                            users[username]['skills'] = skills_list
                            # Save the updated user with additional fields
                            save_users(users)
                        
                        success_message = "Team member added successfully!"
                    else:
                        st.error(f"Error creating user: {message}")
                        return
                
                # Reset form
                st.session_state.show_member_form = False
                st.session_state.editing_member = None
                
                st.success(success_message)
                st.rerun()

# Team achievements section
st.markdown("---")
st.subheader("Team Achievements")

# In a full implementation, this would load from a database
# Sample data for demonstration
achievements = [
    {
        "title": "Regional Competition - 2nd Place",
        "date": "June 15, 2023",
        "description": "The team secured 2nd place in the regional STEM racing competition, demonstrating exceptional engineering and teamwork.",
        "members_involved": ["Alex Johnson", "Maria Garcia", "Jamal Williams", "Sarah Chen"]
    },
    {
        "title": "Best Design Award",
        "date": "March 10, 2023",
        "description": "Recognized for innovative vehicle design and exceptional documentation at the state engineering showcase.",
        "members_involved": ["David Kim", "Sarah Chen", "Jamal Williams"]
    },
    {
        "title": "Community Impact Recognition",
        "date": "November 22, 2022",
        "description": "Received special recognition from the city council for community outreach efforts in STEM education.",
        "members_involved": ["Maria Garcia", "Carlos Rodriguez", "Aisha Patel"]
    }
]

# Display achievements in expandable sections
for achievement in achievements:
    with st.expander(f"{achievement['title']} - {achievement['date']}"):
        st.markdown(f"**Description:** {achievement['description']}")
        st.markdown(f"**Team Members Involved:** {', '.join(achievement['members_involved'])}")

st.caption("Circuit Breakers Team Hub - Team Profiles")
